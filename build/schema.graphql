type GCCRetired @entity(immutable: true) {
  id: Bytes!
  account: User!
  rewardAddress: User! # address
  amountGCCRetired: BigInt! # uint256
  usdcEffect: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  impactPower: BigInt!
  transactionHash: Bytes!
}
type USDCRetired @entity(immutable: true) {
  id: Bytes!
  account: User!
  rewardAddress: User! # address
  usdcEffect: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  impactPower: BigInt!
  transactionHash: Bytes!
}

enum ProposalType {
  VetoCouncilElectionOrSlash
  Grants
  RequestForComment
  GCAElectionOrSlash
  ChangeGCARequirements
}

interface Proposal @entity {
  id: ID!
  proposer: User! # Address of the proposer
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  proposalType: ProposalType!
  nominationsUsed: NominationsUsed!
}

type MostPopularProposal @entity {
  id: ID! #Let's make this the week number
  proposal: Proposal!
  isVetoed: Boolean!
  vetoer: User
  voteBreakdown: MostPopularProposalVoteBreakdown!
}

type MostPopularProposalVoteBreakdown @entity {
  id: ID! #mpp-bk-proposalId
  mostPopularProposal: MostPopularProposal!
  ratificationVoteBreakdown: RatificationVoteBreakdown!
  rejectionVoteBreakdown: RejectionVoteBreakdown!
}

type RatificationVoteBreakdown @entity {
  id: ID!
  mostPopularProposalVoteBreakdown: MostPopularProposalVoteBreakdown!
  totalRatificationVotes: BigInt!
  ratificationVotes: [RatificationVote!]!
    @derivedFrom(field: "ratificationVoteBreakdown")
}

type RejectionVoteBreakdown @entity {
  id: ID!
  mostPopularProposalVoteBreakdown: MostPopularProposalVoteBreakdown!
  totalRejectionVotes: BigInt!
  rejectionVotes: [RejectionVote!]!
    @derivedFrom(field: "rejectionVoteBreakdown")
}
type RatificationVote @entity(immutable: true) {
  id: ID!
  ratificationVoteBreakdown: RatificationVoteBreakdown!
  user: User!
  transactionHash: Bytes!
  numberOfVotes: BigInt!
  blockTimestamp: BigInt!
}

type RejectionVote @entity(immutable: true) {
  id: ID!
  rejectionVoteBreakdown: RejectionVoteBreakdown!
  user: User!
  transactionHash: Bytes!
  numberOfVotes: BigInt!
  blockTimestamp: BigInt!
}

# type RatificationVoteSingular @entity(immutable:true) {
#   id: ID!
#   user: User!
#   proposal: Proposal!
#   transactionHash: Bytes!
#   numberOfVotes: BigInt!
# }

type VetoCouncilElectionOrSlashProposal implements Proposal @entity {
  id: ID!
  proposer: User!
  oldAgent: User!
  newAgent: User!
  slashOldAgent: Boolean!
  proposalType: ProposalType!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nominationsUsed: NominationsUsed!
}

type GCAElectionOrSlashProposal implements Proposal @entity {
  id: ID!
  proposer: User!
  agentsToSlash: [User!]!
  newGCAs: [User!]!
  proposalType: ProposalType!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nominationsUsed: NominationsUsed!
}

type RFCProposal implements Proposal @entity {
  id: ID!
  proposer: User!
  proposalType: ProposalType!
  hash: Bytes!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nominationsUsed: NominationsUsed!
  # Other specific fields for RFCProposal
}

type GrantsProposal implements Proposal @entity {
  id: ID!
  proposer: User!
  proposalType: ProposalType!
  hash: Bytes!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nominationsUsed: NominationsUsed!
  recipient: User!
  amount: BigInt!
}

type ChangeGCARequirementsHashProposal implements Proposal @entity {
  id: ID!
  proposer: User!
  proposalType: ProposalType!
  hash: Bytes!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nominationsUsed: NominationsUsed!
}

type RetireGCCAllowance @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NominationsUsed @entity {
  id: ID!
  proposal: Proposal!
  nominationsUsed: BigInt!
  nominationBreakdown: [NominationSpend!]!
    @derivedFrom(field: "nominationsUsed")
}

type NominationSpend @entity(immutable: true) {
  id: ID!
  user: User!
  amount: BigInt!
  proposal: Proposal!
  nominationsUsed: NominationsUsed!
  transactionHash: Bytes!
}

enum ActivityType {
  Vote
  Stake
  Unstake
  Ratify
  Reject
  Create
  Veto
  Nominate
}

type Activity @entity {
  id: ID!
  user: User!
  activityType: ActivityType!
  timestamp: BigInt!
  transactionHash: Bytes!
  proposal: Proposal
  votes: BigInt
  glowAmount: BigInt
  nominationsUsed: BigInt
}

type User @entity {
  id: ID!
  gccRetired: [GCCRetired!]! @derivedFrom(field: "account")
  usdcRetired: [USDCRetired!]! @derivedFrom(field: "account")
  nominationsUsed: [NominationSpend!]! @derivedFrom(field: "user")
  ratificationVotes: [RatificationVote!]! @derivedFrom(field: "user")
  rejectionVotes: [RejectionVote!]! @derivedFrom(field: "user")
  donations: [Donation!]! @derivedFrom(field: "user")
  earlyLiquidityPurchases: [EarlyLiquidityPurchase!]!
    @derivedFrom(field: "user")
  activities: [Activity!]! @derivedFrom(field: "user")
  totalUSDCEffect: BigInt!
  nonceSeperator: BigInt!
  totalImpactPoints: BigInt!
  totalStakedGlow: BigInt!
}

# Order Of Operations for An Early Liquidity Purchase
# 1. Emit AmountDonatedToBucket(indexed uint256,uint256) first from MinerPoolAndGCA
# 2. Emit Purchase(indexed uint256,uint256,uint256) from EarlyLiquidityPurchase
# Note: Their transaction will be the same transactionHash since they are emitted in the same transaction
# In order to make sure we're not putting in duplicate data, we do the following:
# 1. Insert the `Donation` since it's emitted first
# 2. In the `EarlyLiquidityPurchase` we check if the `Donation` with that transaction hash and current nonce exists,
# 3. If it does exist, we delete the `Donation` and insert the `EarlyLiquidityPurchase`
#

type EarlyLiquidityOrDonationTransactionHashNonceManager @entity {
  id: ID!
  nonce: BigInt!
}
type EarlyLiquidityPurchase @entity(immutable: true) {
  id: ID!
  user: User!
  glowReceived: BigInt!
  usdcSpent: BigInt!
  transactionHash: Bytes!
  blockTimestamp: BigInt!
}
type Donation @entity {
  id: ID!
  user: User!
  amount: BigInt!
  transactionHash: Bytes!
  blockTimestamp: BigInt!
  bucketId: BigInt!
  isDonation: Boolean!
}

type ProtocolFeeSum @entity {
  id: ID!
  totalProtocolFeesPaid: BigInt!
}

type EarlyLiquidityPaymentsPerWeek @entity {
  id: ID! #week number
  totalPayments: BigInt!
}

# type ProtocolFeePaymentNonce
# type ProtocolFeePayment @entity {
#   id: ID!
#   user: User!
#   amountPaid: BigInt!
#   transactionHash: Bytes!
#   blockTimestamp: BigInt!
# }

type ProtocolFeePaymentsPerWeek @entity {
  id: ID! #week number
  totalPayments: BigInt!
}

type TotalGlowBurnedAggregate @entity {
  id: ID!
  totalGlowBurned: BigInt!
}

type Total_USDG_GCC_Pair_Aggregate @entity {
  id: ID!
  totalAmountZeroOut: BigInt!
  totalAmountOneOut: BigInt!
  totalAmountZeroIn: BigInt!
  totalAmountOneIn: BigInt!
}

type Total_GLOW_USDG_Pair_Aggregate @entity {
  id: ID!
  totalAmountZeroOut: BigInt!
  totalAmountOneOut: BigInt!
  totalAmountZeroIn: BigInt!
  totalAmountOneIn: BigInt!
}

type TotalImpactPointsAggregate @entity {
  id: ID!
  totalImpactPoints: BigInt!
  totalUSDC_Committed: BigInt!
  totalGCC_Committed: BigInt!
  totalUSDC_Value: BigInt! #includes usdc of swaps
}
