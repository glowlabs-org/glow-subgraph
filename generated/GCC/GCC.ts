// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CommitGCCAllowance extends ethereum.Event {
  get params(): CommitGCCAllowance__Params {
    return new CommitGCCAllowance__Params(this);
  }
}

export class CommitGCCAllowance__Params {
  _event: CommitGCCAllowance;

  constructor(event: CommitGCCAllowance) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class GCCCommitted extends ethereum.Event {
  get params(): GCCCommitted__Params {
    return new GCCCommitted__Params(this);
  }
}

export class GCCCommitted__Params {
  _event: GCCCommitted;

  constructor(event: GCCCommitted) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get gccAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get usdcEffect(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get impactPower(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get referralAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class USDCCommitted extends ethereum.Event {
  get params(): USDCCommitted__Params {
    return new USDCCommitted__Params(this);
  }
}

export class USDCCommitted__Params {
  _event: USDCCommitted;

  constructor(event: USDCCommitted) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get impactPower(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get referralAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class GCC__commitGCCResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class GCC__commitGCC1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getUsdcEffect(): BigInt {
    return this.value0;
  }

  getImpactPower(): BigInt {
    return this.value1;
  }
}

export class GCC__commitGCCForResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class GCC__commitGCCFor1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getUsdcEffect(): BigInt {
    return this.value0;
  }

  getImpactPower(): BigInt {
    return this.value1;
  }
}

export class GCC__commitGCCForAuthorizedResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class GCC__commitGCCForAuthorized1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getUsdcEffect(): BigInt {
    return this.value0;
  }

  getImpactPower(): BigInt {
    return this.value1;
  }
}

export class GCC__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class GCC extends ethereum.SmartContract {
  static bind(address: Address): GCC {
    return new GCC("GCC", address);
  }

  CARBON_CREDIT_AUCTION(): Address {
    let result = super.call(
      "CARBON_CREDIT_AUCTION",
      "CARBON_CREDIT_AUCTION():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_CARBON_CREDIT_AUCTION(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "CARBON_CREDIT_AUCTION",
      "CARBON_CREDIT_AUCTION():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  COMMIT_PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "COMMIT_PERMIT_TYPEHASH",
      "COMMIT_PERMIT_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_COMMIT_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "COMMIT_PERMIT_TYPEHASH",
      "COMMIT_PERMIT_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  GCA_AND_MINER_POOL_CONTRACT(): Address {
    let result = super.call(
      "GCA_AND_MINER_POOL_CONTRACT",
      "GCA_AND_MINER_POOL_CONTRACT():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_GCA_AND_MINER_POOL_CONTRACT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "GCA_AND_MINER_POOL_CONTRACT",
      "GCA_AND_MINER_POOL_CONTRACT():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GLOW(): Address {
    let result = super.call("GLOW", "GLOW():(address)", []);

    return result[0].toAddress();
  }

  try_GLOW(): ethereum.CallResult<Address> {
    let result = super.tryCall("GLOW", "GLOW():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GOVERNANCE(): Address {
    let result = super.call("GOVERNANCE", "GOVERNANCE():(address)", []);

    return result[0].toAddress();
  }

  try_GOVERNANCE(): ethereum.CallResult<Address> {
    let result = super.tryCall("GOVERNANCE", "GOVERNANCE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  IMPACT_CATALYST(): Address {
    let result = super.call(
      "IMPACT_CATALYST",
      "IMPACT_CATALYST():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_IMPACT_CATALYST(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "IMPACT_CATALYST",
      "IMPACT_CATALYST():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  UNISWAP_ROUTER(): Address {
    let result = super.call("UNISWAP_ROUTER", "UNISWAP_ROUTER():(address)", []);

    return result[0].toAddress();
  }

  try_UNISWAP_ROUTER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "UNISWAP_ROUTER",
      "UNISWAP_ROUTER():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  USDC(): Address {
    let result = super.call("USDC", "USDC():(address)", []);

    return result[0].toAddress();
  }

  try_USDC(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC", "USDC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitAllowance(account: Address, spender: Address): BigInt {
    let result = super.call(
      "commitAllowance",
      "commitAllowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(spender),
      ],
    );

    return result[0].toBigInt();
  }

  try_commitAllowance(
    account: Address,
    spender: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commitAllowance",
      "commitAllowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(spender),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitGCC(
    amount: BigInt,
    rewardAddress: Address,
    minImpactPower: BigInt,
  ): GCC__commitGCCResult {
    let result = super.call(
      "commitGCC",
      "commitGCC(uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );

    return new GCC__commitGCCResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_commitGCC(
    amount: BigInt,
    rewardAddress: Address,
    minImpactPower: BigInt,
  ): ethereum.CallResult<GCC__commitGCCResult> {
    let result = super.tryCall(
      "commitGCC",
      "commitGCC(uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GCC__commitGCCResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  commitGCC1(
    amount: BigInt,
    rewardAddress: Address,
    referralAddress: Address,
    minImpactPower: BigInt,
  ): GCC__commitGCC1Result {
    let result = super.call(
      "commitGCC",
      "commitGCC(uint256,address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromAddress(referralAddress),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );

    return new GCC__commitGCC1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_commitGCC1(
    amount: BigInt,
    rewardAddress: Address,
    referralAddress: Address,
    minImpactPower: BigInt,
  ): ethereum.CallResult<GCC__commitGCC1Result> {
    let result = super.tryCall(
      "commitGCC",
      "commitGCC(uint256,address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromAddress(referralAddress),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GCC__commitGCC1Result(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  commitGCCFor(
    from: Address,
    rewardAddress: Address,
    amount: BigInt,
    minImpactPower: BigInt,
  ): GCC__commitGCCForResult {
    let result = super.call(
      "commitGCCFor",
      "commitGCCFor(address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );

    return new GCC__commitGCCForResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_commitGCCFor(
    from: Address,
    rewardAddress: Address,
    amount: BigInt,
    minImpactPower: BigInt,
  ): ethereum.CallResult<GCC__commitGCCForResult> {
    let result = super.tryCall(
      "commitGCCFor",
      "commitGCCFor(address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GCC__commitGCCForResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  commitGCCFor1(
    from: Address,
    rewardAddress: Address,
    amount: BigInt,
    referralAddress: Address,
    minImpactPower: BigInt,
  ): GCC__commitGCCFor1Result {
    let result = super.call(
      "commitGCCFor",
      "commitGCCFor(address,address,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(referralAddress),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );

    return new GCC__commitGCCFor1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_commitGCCFor1(
    from: Address,
    rewardAddress: Address,
    amount: BigInt,
    referralAddress: Address,
    minImpactPower: BigInt,
  ): ethereum.CallResult<GCC__commitGCCFor1Result> {
    let result = super.tryCall(
      "commitGCCFor",
      "commitGCCFor(address,address,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(referralAddress),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GCC__commitGCCFor1Result(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  commitGCCForAuthorized(
    from: Address,
    rewardAddress: Address,
    amount: BigInt,
    deadline: BigInt,
    signature: Bytes,
    referralAddress: Address,
    minImpactPower: BigInt,
  ): GCC__commitGCCForAuthorizedResult {
    let result = super.call(
      "commitGCCForAuthorized",
      "commitGCCForAuthorized(address,address,uint256,uint256,bytes,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromAddress(referralAddress),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );

    return new GCC__commitGCCForAuthorizedResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_commitGCCForAuthorized(
    from: Address,
    rewardAddress: Address,
    amount: BigInt,
    deadline: BigInt,
    signature: Bytes,
    referralAddress: Address,
    minImpactPower: BigInt,
  ): ethereum.CallResult<GCC__commitGCCForAuthorizedResult> {
    let result = super.tryCall(
      "commitGCCForAuthorized",
      "commitGCCForAuthorized(address,address,uint256,uint256,bytes,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromAddress(referralAddress),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GCC__commitGCCForAuthorizedResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  commitGCCForAuthorized1(
    from: Address,
    rewardAddress: Address,
    amount: BigInt,
    deadline: BigInt,
    signature: Bytes,
    minImpactPower: BigInt,
  ): GCC__commitGCCForAuthorized1Result {
    let result = super.call(
      "commitGCCForAuthorized",
      "commitGCCForAuthorized(address,address,uint256,uint256,bytes,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );

    return new GCC__commitGCCForAuthorized1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_commitGCCForAuthorized1(
    from: Address,
    rewardAddress: Address,
    amount: BigInt,
    deadline: BigInt,
    signature: Bytes,
    minImpactPower: BigInt,
  ): ethereum.CallResult<GCC__commitGCCForAuthorized1Result> {
    let result = super.tryCall(
      "commitGCCForAuthorized",
      "commitGCCForAuthorized(address,address,uint256,uint256,bytes,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GCC__commitGCCForAuthorized1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  commitUSDC(
    amount: BigInt,
    rewardAddress: Address,
    minImpactPower: BigInt,
  ): BigInt {
    let result = super.call(
      "commitUSDC",
      "commitUSDC(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );

    return result[0].toBigInt();
  }

  try_commitUSDC(
    amount: BigInt,
    rewardAddress: Address,
    minImpactPower: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commitUSDC",
      "commitUSDC(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitUSDC1(
    amount: BigInt,
    rewardAddress: Address,
    referralAddress: Address,
    minImpactPower: BigInt,
  ): BigInt {
    let result = super.call(
      "commitUSDC",
      "commitUSDC(uint256,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromAddress(referralAddress),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );

    return result[0].toBigInt();
  }

  try_commitUSDC1(
    amount: BigInt,
    rewardAddress: Address,
    referralAddress: Address,
    minImpactPower: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commitUSDC",
      "commitUSDC(uint256,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromAddress(referralAddress),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitUSDCSignature(
    amount: BigInt,
    rewardAddress: Address,
    referralAddress: Address,
    deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes,
    minImpactPower: BigInt,
  ): BigInt {
    let result = super.call(
      "commitUSDCSignature",
      "commitUSDCSignature(uint256,address,address,uint256,uint8,bytes32,bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromAddress(referralAddress),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );

    return result[0].toBigInt();
  }

  try_commitUSDCSignature(
    amount: BigInt,
    rewardAddress: Address,
    referralAddress: Address,
    deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes,
    minImpactPower: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commitUSDCSignature",
      "commitUSDCSignature(uint256,address,address,uint256,uint8,bytes32,bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(rewardAddress),
        ethereum.Value.fromAddress(referralAddress),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
        ethereum.Value.fromUnsignedBigInt(minImpactPower),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, requestedDecrease: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(requestedDecrease),
      ],
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    requestedDecrease: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(requestedDecrease),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  domainSeparatorV4(): Bytes {
    let result = super.call(
      "domainSeparatorV4",
      "domainSeparatorV4():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_domainSeparatorV4(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparatorV4",
      "domainSeparatorV4():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  eip712Domain(): GCC__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new GCC__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<GCC__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GCC__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBucketMinted(bucketId: BigInt): boolean {
    let result = super.call(
      "isBucketMinted",
      "isBucketMinted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );

    return result[0].toBoolean();
  }

  try_isBucketMinted(bucketId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBucketMinted",
      "isBucketMinted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextCommitNonce(param0: Address): BigInt {
    let result = super.call(
      "nextCommitNonce",
      "nextCommitNonce(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_nextCommitNonce(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextCommitNonce",
      "nextCommitNonce(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalImpactPowerEarned(param0: Address): BigInt {
    let result = super.call(
      "totalImpactPowerEarned",
      "totalImpactPowerEarned(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_totalImpactPowerEarned(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalImpactPowerEarned",
      "totalImpactPowerEarned(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _gcaAndMinerPoolContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _governance(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _glowToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _usdc(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _uniswapRouter(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnFromCall extends ethereum.Call {
  get inputs(): BurnFromCall__Inputs {
    return new BurnFromCall__Inputs(this);
  }

  get outputs(): BurnFromCall__Outputs {
    return new BurnFromCall__Outputs(this);
  }
}

export class BurnFromCall__Inputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnFromCall__Outputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }
}

export class CommitGCCCall extends ethereum.Call {
  get inputs(): CommitGCCCall__Inputs {
    return new CommitGCCCall__Inputs(this);
  }

  get outputs(): CommitGCCCall__Outputs {
    return new CommitGCCCall__Outputs(this);
  }
}

export class CommitGCCCall__Inputs {
  _call: CommitGCCCall;

  constructor(call: CommitGCCCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rewardAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get minImpactPower(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CommitGCCCall__Outputs {
  _call: CommitGCCCall;

  constructor(call: CommitGCCCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CommitGCC1Call extends ethereum.Call {
  get inputs(): CommitGCC1Call__Inputs {
    return new CommitGCC1Call__Inputs(this);
  }

  get outputs(): CommitGCC1Call__Outputs {
    return new CommitGCC1Call__Outputs(this);
  }
}

export class CommitGCC1Call__Inputs {
  _call: CommitGCC1Call;

  constructor(call: CommitGCC1Call) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rewardAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get referralAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get minImpactPower(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CommitGCC1Call__Outputs {
  _call: CommitGCC1Call;

  constructor(call: CommitGCC1Call) {
    this._call = call;
  }

  get usdcEffect(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get impactPower(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CommitGCCForCall extends ethereum.Call {
  get inputs(): CommitGCCForCall__Inputs {
    return new CommitGCCForCall__Inputs(this);
  }

  get outputs(): CommitGCCForCall__Outputs {
    return new CommitGCCForCall__Outputs(this);
  }
}

export class CommitGCCForCall__Inputs {
  _call: CommitGCCForCall;

  constructor(call: CommitGCCForCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minImpactPower(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CommitGCCForCall__Outputs {
  _call: CommitGCCForCall;

  constructor(call: CommitGCCForCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CommitGCCFor1Call extends ethereum.Call {
  get inputs(): CommitGCCFor1Call__Inputs {
    return new CommitGCCFor1Call__Inputs(this);
  }

  get outputs(): CommitGCCFor1Call__Outputs {
    return new CommitGCCFor1Call__Outputs(this);
  }
}

export class CommitGCCFor1Call__Inputs {
  _call: CommitGCCFor1Call;

  constructor(call: CommitGCCFor1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get referralAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get minImpactPower(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CommitGCCFor1Call__Outputs {
  _call: CommitGCCFor1Call;

  constructor(call: CommitGCCFor1Call) {
    this._call = call;
  }

  get usdcEffect(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get impactPower(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CommitGCCForAuthorizedCall extends ethereum.Call {
  get inputs(): CommitGCCForAuthorizedCall__Inputs {
    return new CommitGCCForAuthorizedCall__Inputs(this);
  }

  get outputs(): CommitGCCForAuthorizedCall__Outputs {
    return new CommitGCCForAuthorizedCall__Outputs(this);
  }
}

export class CommitGCCForAuthorizedCall__Inputs {
  _call: CommitGCCForAuthorizedCall;

  constructor(call: CommitGCCForAuthorizedCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get referralAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get minImpactPower(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CommitGCCForAuthorizedCall__Outputs {
  _call: CommitGCCForAuthorizedCall;

  constructor(call: CommitGCCForAuthorizedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CommitGCCForAuthorized1Call extends ethereum.Call {
  get inputs(): CommitGCCForAuthorized1Call__Inputs {
    return new CommitGCCForAuthorized1Call__Inputs(this);
  }

  get outputs(): CommitGCCForAuthorized1Call__Outputs {
    return new CommitGCCForAuthorized1Call__Outputs(this);
  }
}

export class CommitGCCForAuthorized1Call__Inputs {
  _call: CommitGCCForAuthorized1Call;

  constructor(call: CommitGCCForAuthorized1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get minImpactPower(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CommitGCCForAuthorized1Call__Outputs {
  _call: CommitGCCForAuthorized1Call;

  constructor(call: CommitGCCForAuthorized1Call) {
    this._call = call;
  }

  get usdcEffect(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get impactPower(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CommitUSDCCall extends ethereum.Call {
  get inputs(): CommitUSDCCall__Inputs {
    return new CommitUSDCCall__Inputs(this);
  }

  get outputs(): CommitUSDCCall__Outputs {
    return new CommitUSDCCall__Outputs(this);
  }
}

export class CommitUSDCCall__Inputs {
  _call: CommitUSDCCall;

  constructor(call: CommitUSDCCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rewardAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get minImpactPower(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CommitUSDCCall__Outputs {
  _call: CommitUSDCCall;

  constructor(call: CommitUSDCCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CommitUSDC1Call extends ethereum.Call {
  get inputs(): CommitUSDC1Call__Inputs {
    return new CommitUSDC1Call__Inputs(this);
  }

  get outputs(): CommitUSDC1Call__Outputs {
    return new CommitUSDC1Call__Outputs(this);
  }
}

export class CommitUSDC1Call__Inputs {
  _call: CommitUSDC1Call;

  constructor(call: CommitUSDC1Call) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rewardAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get referralAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get minImpactPower(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CommitUSDC1Call__Outputs {
  _call: CommitUSDC1Call;

  constructor(call: CommitUSDC1Call) {
    this._call = call;
  }

  get impactPower(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CommitUSDCSignatureCall extends ethereum.Call {
  get inputs(): CommitUSDCSignatureCall__Inputs {
    return new CommitUSDCSignatureCall__Inputs(this);
  }

  get outputs(): CommitUSDCSignatureCall__Outputs {
    return new CommitUSDCSignatureCall__Outputs(this);
  }
}

export class CommitUSDCSignatureCall__Inputs {
  _call: CommitUSDCSignatureCall;

  constructor(call: CommitUSDCSignatureCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rewardAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get referralAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get minImpactPower(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class CommitUSDCSignatureCall__Outputs {
  _call: CommitUSDCSignatureCall;

  constructor(call: CommitUSDCSignatureCall) {
    this._call = call;
  }

  get impactPower(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get requestedDecrease(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowancesCall extends ethereum.Call {
  get inputs(): DecreaseAllowancesCall__Inputs {
    return new DecreaseAllowancesCall__Inputs(this);
  }

  get outputs(): DecreaseAllowancesCall__Outputs {
    return new DecreaseAllowancesCall__Outputs(this);
  }
}

export class DecreaseAllowancesCall__Inputs {
  _call: DecreaseAllowancesCall;

  constructor(call: DecreaseAllowancesCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get requestedDecrease(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowancesCall__Outputs {
  _call: DecreaseAllowancesCall;

  constructor(call: DecreaseAllowancesCall) {
    this._call = call;
  }
}

export class DecreaseCommitAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseCommitAllowanceCall__Inputs {
    return new DecreaseCommitAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseCommitAllowanceCall__Outputs {
    return new DecreaseCommitAllowanceCall__Outputs(this);
  }
}

export class DecreaseCommitAllowanceCall__Inputs {
  _call: DecreaseCommitAllowanceCall;

  constructor(call: DecreaseCommitAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseCommitAllowanceCall__Outputs {
  _call: DecreaseCommitAllowanceCall;

  constructor(call: DecreaseCommitAllowanceCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowancesCall extends ethereum.Call {
  get inputs(): IncreaseAllowancesCall__Inputs {
    return new IncreaseAllowancesCall__Inputs(this);
  }

  get outputs(): IncreaseAllowancesCall__Outputs {
    return new IncreaseAllowancesCall__Outputs(this);
  }
}

export class IncreaseAllowancesCall__Inputs {
  _call: IncreaseAllowancesCall;

  constructor(call: IncreaseAllowancesCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowancesCall__Outputs {
  _call: IncreaseAllowancesCall;

  constructor(call: IncreaseAllowancesCall) {
    this._call = call;
  }
}

export class IncreaseCommitAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseCommitAllowanceCall__Inputs {
    return new IncreaseCommitAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseCommitAllowanceCall__Outputs {
    return new IncreaseCommitAllowanceCall__Outputs(this);
  }
}

export class IncreaseCommitAllowanceCall__Inputs {
  _call: IncreaseCommitAllowanceCall;

  constructor(call: IncreaseCommitAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseCommitAllowanceCall__Outputs {
  _call: IncreaseCommitAllowanceCall;

  constructor(call: IncreaseCommitAllowanceCall) {
    this._call = call;
  }
}

export class MintToCarbonCreditAuctionCall extends ethereum.Call {
  get inputs(): MintToCarbonCreditAuctionCall__Inputs {
    return new MintToCarbonCreditAuctionCall__Inputs(this);
  }

  get outputs(): MintToCarbonCreditAuctionCall__Outputs {
    return new MintToCarbonCreditAuctionCall__Outputs(this);
  }
}

export class MintToCarbonCreditAuctionCall__Inputs {
  _call: MintToCarbonCreditAuctionCall;

  constructor(call: MintToCarbonCreditAuctionCall) {
    this._call = call;
  }

  get bucketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintToCarbonCreditAuctionCall__Outputs {
  _call: MintToCarbonCreditAuctionCall;

  constructor(call: MintToCarbonCreditAuctionCall) {
    this._call = call;
  }
}

export class SetAllowancesCall extends ethereum.Call {
  get inputs(): SetAllowancesCall__Inputs {
    return new SetAllowancesCall__Inputs(this);
  }

  get outputs(): SetAllowancesCall__Outputs {
    return new SetAllowancesCall__Outputs(this);
  }
}

export class SetAllowancesCall__Inputs {
  _call: SetAllowancesCall;

  constructor(call: SetAllowancesCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get transferAllowance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get committingAllowance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetAllowancesCall__Outputs {
  _call: SetAllowancesCall;

  constructor(call: SetAllowancesCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
