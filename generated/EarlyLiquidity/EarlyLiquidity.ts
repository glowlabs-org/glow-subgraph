// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Purchase extends ethereum.Event {
  get params(): Purchase__Params {
    return new Purchase__Params(this);
  }
}

export class Purchase__Params {
  _event: Purchase;

  constructor(event: Purchase) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get glwReceived(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalUSDCSpent(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EarlyLiquidity extends ethereum.SmartContract {
  static bind(address: Address): EarlyLiquidity {
    return new EarlyLiquidity("EarlyLiquidity", address);
  }

  GLOW_TOKEN(): Address {
    let result = super.call("GLOW_TOKEN", "GLOW_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_GLOW_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("GLOW_TOKEN", "GLOW_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  HOLDING_CONTRACT(): Address {
    let result = super.call(
      "HOLDING_CONTRACT",
      "HOLDING_CONTRACT():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_HOLDING_CONTRACT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "HOLDING_CONTRACT",
      "HOLDING_CONTRACT():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MINER_POOL(): Address {
    let result = super.call("MINER_POOL", "MINER_POOL():(address)", []);

    return result[0].toAddress();
  }

  try_MINER_POOL(): ethereum.CallResult<Address> {
    let result = super.tryCall("MINER_POOL", "MINER_POOL():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MIN_TOKEN_INCREMENT(): BigInt {
    let result = super.call(
      "MIN_TOKEN_INCREMENT",
      "MIN_TOKEN_INCREMENT():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_TOKEN_INCREMENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_TOKEN_INCREMENT",
      "MIN_TOKEN_INCREMENT():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_INCREMENTS_TO_SELL(): BigInt {
    let result = super.call(
      "TOTAL_INCREMENTS_TO_SELL",
      "TOTAL_INCREMENTS_TO_SELL():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_TOTAL_INCREMENTS_TO_SELL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOTAL_INCREMENTS_TO_SELL",
      "TOTAL_INCREMENTS_TO_SELL():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  USDC_DECIMALS(): BigInt {
    let result = super.call("USDC_DECIMALS", "USDC_DECIMALS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_USDC_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "USDC_DECIMALS",
      "USDC_DECIMALS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  USDC_TOKEN(): Address {
    let result = super.call("USDC_TOKEN", "USDC_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_USDC_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC_TOKEN", "USDC_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentPrice(): BigInt {
    let result = super.call(
      "getCurrentPrice",
      "getCurrentPrice():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getCurrentPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPrice",
      "getCurrentPrice():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(incrementsToPurchase: BigInt): BigInt {
    let result = super.call("getPrice", "getPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(incrementsToPurchase),
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(incrementsToPurchase: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPrice", "getPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(incrementsToPurchase),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSold(): BigInt {
    let result = super.call("totalSold", "totalSold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSold", "totalSold():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _usdcAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _holdingContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _glowToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _minerPoolAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get increments(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxCost(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}
