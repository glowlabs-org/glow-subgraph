// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class GCCRetired extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GCCRetired entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GCCRetired must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GCCRetired", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): GCCRetired | null {
    return changetype<GCCRetired | null>(
      store.get_in_block("GCCRetired", id.toHexString()),
    );
  }

  static load(id: Bytes): GCCRetired | null {
    return changetype<GCCRetired | null>(
      store.get("GCCRetired", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get rewardAddress(): string {
    let value = this.get("rewardAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rewardAddress(value: string) {
    this.set("rewardAddress", Value.fromString(value));
  }

  get amountGCCRetired(): BigInt {
    let value = this.get("amountGCCRetired");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountGCCRetired(value: BigInt) {
    this.set("amountGCCRetired", Value.fromBigInt(value));
  }

  get usdcEffect(): BigInt {
    let value = this.get("usdcEffect");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdcEffect(value: BigInt) {
    this.set("usdcEffect", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get impactPower(): BigInt {
    let value = this.get("impactPower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set impactPower(value: BigInt) {
    this.set("impactPower", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class USDCRetired extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save USDCRetired entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type USDCRetired must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("USDCRetired", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): USDCRetired | null {
    return changetype<USDCRetired | null>(
      store.get_in_block("USDCRetired", id.toHexString()),
    );
  }

  static load(id: Bytes): USDCRetired | null {
    return changetype<USDCRetired | null>(
      store.get("USDCRetired", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get rewardAddress(): string {
    let value = this.get("rewardAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rewardAddress(value: string) {
    this.set("rewardAddress", Value.fromString(value));
  }

  get usdcEffect(): BigInt {
    let value = this.get("usdcEffect");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdcEffect(value: BigInt) {
    this.set("usdcEffect", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get impactPower(): BigInt {
    let value = this.get("impactPower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set impactPower(value: BigInt) {
    this.set("impactPower", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class MostPopularProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MostPopularProposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MostPopularProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MostPopularProposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MostPopularProposal | null {
    return changetype<MostPopularProposal | null>(
      store.get_in_block("MostPopularProposal", id),
    );
  }

  static load(id: string): MostPopularProposal | null {
    return changetype<MostPopularProposal | null>(
      store.get("MostPopularProposal", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get isVetoed(): boolean {
    let value = this.get("isVetoed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isVetoed(value: boolean) {
    this.set("isVetoed", Value.fromBoolean(value));
  }

  get vetoer(): string | null {
    let value = this.get("vetoer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set vetoer(value: string | null) {
    if (!value) {
      this.unset("vetoer");
    } else {
      this.set("vetoer", Value.fromString(<string>value));
    }
  }

  get voteBreakdown(): string {
    let value = this.get("voteBreakdown");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set voteBreakdown(value: string) {
    this.set("voteBreakdown", Value.fromString(value));
  }
}

export class MostPopularProposalVoteBreakdown extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MostPopularProposalVoteBreakdown entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MostPopularProposalVoteBreakdown must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MostPopularProposalVoteBreakdown", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MostPopularProposalVoteBreakdown | null {
    return changetype<MostPopularProposalVoteBreakdown | null>(
      store.get_in_block("MostPopularProposalVoteBreakdown", id),
    );
  }

  static load(id: string): MostPopularProposalVoteBreakdown | null {
    return changetype<MostPopularProposalVoteBreakdown | null>(
      store.get("MostPopularProposalVoteBreakdown", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mostPopularProposal(): string {
    let value = this.get("mostPopularProposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mostPopularProposal(value: string) {
    this.set("mostPopularProposal", Value.fromString(value));
  }

  get ratificationVoteBreakdown(): string {
    let value = this.get("ratificationVoteBreakdown");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ratificationVoteBreakdown(value: string) {
    this.set("ratificationVoteBreakdown", Value.fromString(value));
  }

  get rejectionVoteBreakdown(): string {
    let value = this.get("rejectionVoteBreakdown");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rejectionVoteBreakdown(value: string) {
    this.set("rejectionVoteBreakdown", Value.fromString(value));
  }
}

export class RatificationVoteBreakdown extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RatificationVoteBreakdown entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RatificationVoteBreakdown must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RatificationVoteBreakdown", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RatificationVoteBreakdown | null {
    return changetype<RatificationVoteBreakdown | null>(
      store.get_in_block("RatificationVoteBreakdown", id),
    );
  }

  static load(id: string): RatificationVoteBreakdown | null {
    return changetype<RatificationVoteBreakdown | null>(
      store.get("RatificationVoteBreakdown", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mostPopularProposalVoteBreakdown(): string {
    let value = this.get("mostPopularProposalVoteBreakdown");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mostPopularProposalVoteBreakdown(value: string) {
    this.set("mostPopularProposalVoteBreakdown", Value.fromString(value));
  }

  get totalRatificationVotes(): BigInt {
    let value = this.get("totalRatificationVotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRatificationVotes(value: BigInt) {
    this.set("totalRatificationVotes", Value.fromBigInt(value));
  }

  get ratificationVotes(): RatificationVoteLoader {
    return new RatificationVoteLoader(
      "RatificationVoteBreakdown",
      this.get("id")!.toString(),
      "ratificationVotes",
    );
  }
}

export class RejectionVoteBreakdown extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RejectionVoteBreakdown entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RejectionVoteBreakdown must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RejectionVoteBreakdown", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RejectionVoteBreakdown | null {
    return changetype<RejectionVoteBreakdown | null>(
      store.get_in_block("RejectionVoteBreakdown", id),
    );
  }

  static load(id: string): RejectionVoteBreakdown | null {
    return changetype<RejectionVoteBreakdown | null>(
      store.get("RejectionVoteBreakdown", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mostPopularProposalVoteBreakdown(): string {
    let value = this.get("mostPopularProposalVoteBreakdown");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mostPopularProposalVoteBreakdown(value: string) {
    this.set("mostPopularProposalVoteBreakdown", Value.fromString(value));
  }

  get totalRejectionVotes(): BigInt {
    let value = this.get("totalRejectionVotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRejectionVotes(value: BigInt) {
    this.set("totalRejectionVotes", Value.fromBigInt(value));
  }

  get rejectionVotes(): RejectionVoteLoader {
    return new RejectionVoteLoader(
      "RejectionVoteBreakdown",
      this.get("id")!.toString(),
      "rejectionVotes",
    );
  }
}

export class RatificationVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RatificationVote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RatificationVote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RatificationVote", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RatificationVote | null {
    return changetype<RatificationVote | null>(
      store.get_in_block("RatificationVote", id),
    );
  }

  static load(id: string): RatificationVote | null {
    return changetype<RatificationVote | null>(
      store.get("RatificationVote", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ratificationVoteBreakdown(): string {
    let value = this.get("ratificationVoteBreakdown");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ratificationVoteBreakdown(value: string) {
    this.set("ratificationVoteBreakdown", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get numberOfVotes(): BigInt {
    let value = this.get("numberOfVotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numberOfVotes(value: BigInt) {
    this.set("numberOfVotes", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class RejectionVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RejectionVote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RejectionVote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RejectionVote", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RejectionVote | null {
    return changetype<RejectionVote | null>(
      store.get_in_block("RejectionVote", id),
    );
  }

  static load(id: string): RejectionVote | null {
    return changetype<RejectionVote | null>(store.get("RejectionVote", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rejectionVoteBreakdown(): string {
    let value = this.get("rejectionVoteBreakdown");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rejectionVoteBreakdown(value: string) {
    this.set("rejectionVoteBreakdown", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get numberOfVotes(): BigInt {
    let value = this.get("numberOfVotes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numberOfVotes(value: BigInt) {
    this.set("numberOfVotes", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class VetoCouncilElectionOrSlashProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save VetoCouncilElectionOrSlashProposal entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VetoCouncilElectionOrSlashProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("VetoCouncilElectionOrSlashProposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VetoCouncilElectionOrSlashProposal | null {
    return changetype<VetoCouncilElectionOrSlashProposal | null>(
      store.get_in_block("VetoCouncilElectionOrSlashProposal", id),
    );
  }

  static load(id: string): VetoCouncilElectionOrSlashProposal | null {
    return changetype<VetoCouncilElectionOrSlashProposal | null>(
      store.get("VetoCouncilElectionOrSlashProposal", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposer(): string {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposer(value: string) {
    this.set("proposer", Value.fromString(value));
  }

  get oldAgent(): string {
    let value = this.get("oldAgent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set oldAgent(value: string) {
    this.set("oldAgent", Value.fromString(value));
  }

  get newAgent(): string {
    let value = this.get("newAgent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set newAgent(value: string) {
    this.set("newAgent", Value.fromString(value));
  }

  get slashOldAgent(): boolean {
    let value = this.get("slashOldAgent");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set slashOldAgent(value: boolean) {
    this.set("slashOldAgent", Value.fromBoolean(value));
  }

  get proposalType(): string {
    let value = this.get("proposalType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposalType(value: string) {
    this.set("proposalType", Value.fromString(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get nominationsUsed(): string {
    let value = this.get("nominationsUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nominationsUsed(value: string) {
    this.set("nominationsUsed", Value.fromString(value));
  }
}

export class GCAElectionOrSlashProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save GCAElectionOrSlashProposal entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GCAElectionOrSlashProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GCAElectionOrSlashProposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GCAElectionOrSlashProposal | null {
    return changetype<GCAElectionOrSlashProposal | null>(
      store.get_in_block("GCAElectionOrSlashProposal", id),
    );
  }

  static load(id: string): GCAElectionOrSlashProposal | null {
    return changetype<GCAElectionOrSlashProposal | null>(
      store.get("GCAElectionOrSlashProposal", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposer(): string {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposer(value: string) {
    this.set("proposer", Value.fromString(value));
  }

  get agentsToSlash(): Array<string> {
    let value = this.get("agentsToSlash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set agentsToSlash(value: Array<string>) {
    this.set("agentsToSlash", Value.fromStringArray(value));
  }

  get newGCAs(): Array<string> {
    let value = this.get("newGCAs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set newGCAs(value: Array<string>) {
    this.set("newGCAs", Value.fromStringArray(value));
  }

  get proposalType(): string {
    let value = this.get("proposalType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposalType(value: string) {
    this.set("proposalType", Value.fromString(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get nominationsUsed(): string {
    let value = this.get("nominationsUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nominationsUsed(value: string) {
    this.set("nominationsUsed", Value.fromString(value));
  }
}

export class RFCProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RFCProposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RFCProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RFCProposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RFCProposal | null {
    return changetype<RFCProposal | null>(
      store.get_in_block("RFCProposal", id),
    );
  }

  static load(id: string): RFCProposal | null {
    return changetype<RFCProposal | null>(store.get("RFCProposal", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposer(): string {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposer(value: string) {
    this.set("proposer", Value.fromString(value));
  }

  get proposalType(): string {
    let value = this.get("proposalType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposalType(value: string) {
    this.set("proposalType", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get nominationsUsed(): string {
    let value = this.get("nominationsUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nominationsUsed(value: string) {
    this.set("nominationsUsed", Value.fromString(value));
  }
}

export class GrantsProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GrantsProposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GrantsProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GrantsProposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GrantsProposal | null {
    return changetype<GrantsProposal | null>(
      store.get_in_block("GrantsProposal", id),
    );
  }

  static load(id: string): GrantsProposal | null {
    return changetype<GrantsProposal | null>(store.get("GrantsProposal", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposer(): string {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposer(value: string) {
    this.set("proposer", Value.fromString(value));
  }

  get proposalType(): string {
    let value = this.get("proposalType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposalType(value: string) {
    this.set("proposalType", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get nominationsUsed(): string {
    let value = this.get("nominationsUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nominationsUsed(value: string) {
    this.set("nominationsUsed", Value.fromString(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ChangeGCARequirementsHashProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ChangeGCARequirementsHashProposal entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChangeGCARequirementsHashProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ChangeGCARequirementsHashProposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ChangeGCARequirementsHashProposal | null {
    return changetype<ChangeGCARequirementsHashProposal | null>(
      store.get_in_block("ChangeGCARequirementsHashProposal", id),
    );
  }

  static load(id: string): ChangeGCARequirementsHashProposal | null {
    return changetype<ChangeGCARequirementsHashProposal | null>(
      store.get("ChangeGCARequirementsHashProposal", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposer(): string {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposer(value: string) {
    this.set("proposer", Value.fromString(value));
  }

  get proposalType(): string {
    let value = this.get("proposalType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposalType(value: string) {
    this.set("proposalType", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get nominationsUsed(): string {
    let value = this.get("nominationsUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nominationsUsed(value: string) {
    this.set("nominationsUsed", Value.fromString(value));
  }
}

export class RetireGCCAllowance extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RetireGCCAllowance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RetireGCCAllowance must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RetireGCCAllowance", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RetireGCCAllowance | null {
    return changetype<RetireGCCAllowance | null>(
      store.get_in_block("RetireGCCAllowance", id.toHexString()),
    );
  }

  static load(id: Bytes): RetireGCCAllowance | null {
    return changetype<RetireGCCAllowance | null>(
      store.get("RetireGCCAllowance", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class NominationsUsed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NominationsUsed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NominationsUsed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NominationsUsed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NominationsUsed | null {
    return changetype<NominationsUsed | null>(
      store.get_in_block("NominationsUsed", id),
    );
  }

  static load(id: string): NominationsUsed | null {
    return changetype<NominationsUsed | null>(store.get("NominationsUsed", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get nominationsUsed(): BigInt {
    let value = this.get("nominationsUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nominationsUsed(value: BigInt) {
    this.set("nominationsUsed", Value.fromBigInt(value));
  }

  get nominationBreakdown(): NominationSpendLoader {
    return new NominationSpendLoader(
      "NominationsUsed",
      this.get("id")!.toString(),
      "nominationBreakdown",
    );
  }
}

export class NominationSpend extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NominationSpend entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NominationSpend must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NominationSpend", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NominationSpend | null {
    return changetype<NominationSpend | null>(
      store.get_in_block("NominationSpend", id),
    );
  }

  static load(id: string): NominationSpend | null {
    return changetype<NominationSpend | null>(store.get("NominationSpend", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get nominationsUsed(): string {
    let value = this.get("nominationsUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nominationsUsed(value: string) {
    this.set("nominationsUsed", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Activity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Activity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Activity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Activity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Activity | null {
    return changetype<Activity | null>(store.get_in_block("Activity", id));
  }

  static load(id: string): Activity | null {
    return changetype<Activity | null>(store.get("Activity", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get activityType(): string {
    let value = this.get("activityType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set activityType(value: string) {
    this.set("activityType", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get proposal(): string | null {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proposal(value: string | null) {
    if (!value) {
      this.unset("proposal");
    } else {
      this.set("proposal", Value.fromString(<string>value));
    }
  }

  get votes(): BigInt | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set votes(value: BigInt | null) {
    if (!value) {
      this.unset("votes");
    } else {
      this.set("votes", Value.fromBigInt(<BigInt>value));
    }
  }

  get glowAmount(): BigInt | null {
    let value = this.get("glowAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set glowAmount(value: BigInt | null) {
    if (!value) {
      this.unset("glowAmount");
    } else {
      this.set("glowAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get nominationsUsed(): BigInt | null {
    let value = this.get("nominationsUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nominationsUsed(value: BigInt | null) {
    if (!value) {
      this.unset("nominationsUsed");
    } else {
      this.set("nominationsUsed", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get gccRetired(): GCCRetiredLoader {
    return new GCCRetiredLoader(
      "User",
      this.get("id")!.toString(),
      "gccRetired",
    );
  }

  get usdcRetired(): USDCRetiredLoader {
    return new USDCRetiredLoader(
      "User",
      this.get("id")!.toString(),
      "usdcRetired",
    );
  }

  get nominationsUsed(): NominationSpendLoader {
    return new NominationSpendLoader(
      "User",
      this.get("id")!.toString(),
      "nominationsUsed",
    );
  }

  get ratificationVotes(): RatificationVoteLoader {
    return new RatificationVoteLoader(
      "User",
      this.get("id")!.toString(),
      "ratificationVotes",
    );
  }

  get rejectionVotes(): RejectionVoteLoader {
    return new RejectionVoteLoader(
      "User",
      this.get("id")!.toString(),
      "rejectionVotes",
    );
  }

  get donations(): DonationLoader {
    return new DonationLoader("User", this.get("id")!.toString(), "donations");
  }

  get earlyLiquidityPurchases(): EarlyLiquidityPurchaseLoader {
    return new EarlyLiquidityPurchaseLoader(
      "User",
      this.get("id")!.toString(),
      "earlyLiquidityPurchases",
    );
  }

  get activities(): ActivityLoader {
    return new ActivityLoader("User", this.get("id")!.toString(), "activities");
  }

  get totalUSDCEffect(): BigInt {
    let value = this.get("totalUSDCEffect");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUSDCEffect(value: BigInt) {
    this.set("totalUSDCEffect", Value.fromBigInt(value));
  }

  get nonceSeperator(): BigInt {
    let value = this.get("nonceSeperator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonceSeperator(value: BigInt) {
    this.set("nonceSeperator", Value.fromBigInt(value));
  }

  get totalImpactPoints(): BigInt {
    let value = this.get("totalImpactPoints");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalImpactPoints(value: BigInt) {
    this.set("totalImpactPoints", Value.fromBigInt(value));
  }

  get totalStakedGlow(): BigInt {
    let value = this.get("totalStakedGlow");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalStakedGlow(value: BigInt) {
    this.set("totalStakedGlow", Value.fromBigInt(value));
  }
}

export class EarlyLiquidityOrDonationTransactionHashNonceManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EarlyLiquidityOrDonationTransactionHashNonceManager entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EarlyLiquidityOrDonationTransactionHashNonceManager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set(
        "EarlyLiquidityOrDonationTransactionHashNonceManager",
        id.toString(),
        this,
      );
    }
  }

  static loadInBlock(
    id: string,
  ): EarlyLiquidityOrDonationTransactionHashNonceManager | null {
    return changetype<EarlyLiquidityOrDonationTransactionHashNonceManager | null>(
      store.get_in_block(
        "EarlyLiquidityOrDonationTransactionHashNonceManager",
        id,
      ),
    );
  }

  static load(
    id: string,
  ): EarlyLiquidityOrDonationTransactionHashNonceManager | null {
    return changetype<EarlyLiquidityOrDonationTransactionHashNonceManager | null>(
      store.get("EarlyLiquidityOrDonationTransactionHashNonceManager", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }
}

export class EarlyLiquidityPurchase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EarlyLiquidityPurchase entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EarlyLiquidityPurchase must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EarlyLiquidityPurchase", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EarlyLiquidityPurchase | null {
    return changetype<EarlyLiquidityPurchase | null>(
      store.get_in_block("EarlyLiquidityPurchase", id),
    );
  }

  static load(id: string): EarlyLiquidityPurchase | null {
    return changetype<EarlyLiquidityPurchase | null>(
      store.get("EarlyLiquidityPurchase", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get glowReceived(): BigInt {
    let value = this.get("glowReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set glowReceived(value: BigInt) {
    this.set("glowReceived", Value.fromBigInt(value));
  }

  get usdcSpent(): BigInt {
    let value = this.get("usdcSpent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdcSpent(value: BigInt) {
    this.set("usdcSpent", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class Donation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Donation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Donation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Donation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Donation | null {
    return changetype<Donation | null>(store.get_in_block("Donation", id));
  }

  static load(id: string): Donation | null {
    return changetype<Donation | null>(store.get("Donation", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get bucketId(): BigInt {
    let value = this.get("bucketId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bucketId(value: BigInt) {
    this.set("bucketId", Value.fromBigInt(value));
  }

  get isDonation(): boolean {
    let value = this.get("isDonation");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isDonation(value: boolean) {
    this.set("isDonation", Value.fromBoolean(value));
  }
}

export class ProtocolFeeSum extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtocolFeeSum entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProtocolFeeSum must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProtocolFeeSum", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProtocolFeeSum | null {
    return changetype<ProtocolFeeSum | null>(
      store.get_in_block("ProtocolFeeSum", id),
    );
  }

  static load(id: string): ProtocolFeeSum | null {
    return changetype<ProtocolFeeSum | null>(store.get("ProtocolFeeSum", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalProtocolFeesPaid(): BigInt {
    let value = this.get("totalProtocolFeesPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProtocolFeesPaid(value: BigInt) {
    this.set("totalProtocolFeesPaid", Value.fromBigInt(value));
  }
}

export class EarlyLiquidityPaymentsPerWeek extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EarlyLiquidityPaymentsPerWeek entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EarlyLiquidityPaymentsPerWeek must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EarlyLiquidityPaymentsPerWeek", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EarlyLiquidityPaymentsPerWeek | null {
    return changetype<EarlyLiquidityPaymentsPerWeek | null>(
      store.get_in_block("EarlyLiquidityPaymentsPerWeek", id),
    );
  }

  static load(id: string): EarlyLiquidityPaymentsPerWeek | null {
    return changetype<EarlyLiquidityPaymentsPerWeek | null>(
      store.get("EarlyLiquidityPaymentsPerWeek", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalPayments(): BigInt {
    let value = this.get("totalPayments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayments(value: BigInt) {
    this.set("totalPayments", Value.fromBigInt(value));
  }
}

export class ProtocolFeePaymentsPerWeek extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ProtocolFeePaymentsPerWeek entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProtocolFeePaymentsPerWeek must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProtocolFeePaymentsPerWeek", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProtocolFeePaymentsPerWeek | null {
    return changetype<ProtocolFeePaymentsPerWeek | null>(
      store.get_in_block("ProtocolFeePaymentsPerWeek", id),
    );
  }

  static load(id: string): ProtocolFeePaymentsPerWeek | null {
    return changetype<ProtocolFeePaymentsPerWeek | null>(
      store.get("ProtocolFeePaymentsPerWeek", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalPayments(): BigInt {
    let value = this.get("totalPayments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPayments(value: BigInt) {
    this.set("totalPayments", Value.fromBigInt(value));
  }
}

export class TotalGlowBurnedAggregate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TotalGlowBurnedAggregate entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TotalGlowBurnedAggregate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TotalGlowBurnedAggregate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TotalGlowBurnedAggregate | null {
    return changetype<TotalGlowBurnedAggregate | null>(
      store.get_in_block("TotalGlowBurnedAggregate", id),
    );
  }

  static load(id: string): TotalGlowBurnedAggregate | null {
    return changetype<TotalGlowBurnedAggregate | null>(
      store.get("TotalGlowBurnedAggregate", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalGlowBurned(): BigInt {
    let value = this.get("totalGlowBurned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGlowBurned(value: BigInt) {
    this.set("totalGlowBurned", Value.fromBigInt(value));
  }
}

export class Total_USDG_GCC_Pair_Aggregate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save Total_USDG_GCC_Pair_Aggregate entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Total_USDG_GCC_Pair_Aggregate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Total_USDG_GCC_Pair_Aggregate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Total_USDG_GCC_Pair_Aggregate | null {
    return changetype<Total_USDG_GCC_Pair_Aggregate | null>(
      store.get_in_block("Total_USDG_GCC_Pair_Aggregate", id),
    );
  }

  static load(id: string): Total_USDG_GCC_Pair_Aggregate | null {
    return changetype<Total_USDG_GCC_Pair_Aggregate | null>(
      store.get("Total_USDG_GCC_Pair_Aggregate", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalAmountZeroOut(): BigInt {
    let value = this.get("totalAmountZeroOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountZeroOut(value: BigInt) {
    this.set("totalAmountZeroOut", Value.fromBigInt(value));
  }

  get totalAmountOneOut(): BigInt {
    let value = this.get("totalAmountOneOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountOneOut(value: BigInt) {
    this.set("totalAmountOneOut", Value.fromBigInt(value));
  }

  get totalAmountZeroIn(): BigInt {
    let value = this.get("totalAmountZeroIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountZeroIn(value: BigInt) {
    this.set("totalAmountZeroIn", Value.fromBigInt(value));
  }

  get totalAmountOneIn(): BigInt {
    let value = this.get("totalAmountOneIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountOneIn(value: BigInt) {
    this.set("totalAmountOneIn", Value.fromBigInt(value));
  }
}

export class Total_GLOW_USDG_Pair_Aggregate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save Total_GLOW_USDG_Pair_Aggregate entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Total_GLOW_USDG_Pair_Aggregate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Total_GLOW_USDG_Pair_Aggregate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Total_GLOW_USDG_Pair_Aggregate | null {
    return changetype<Total_GLOW_USDG_Pair_Aggregate | null>(
      store.get_in_block("Total_GLOW_USDG_Pair_Aggregate", id),
    );
  }

  static load(id: string): Total_GLOW_USDG_Pair_Aggregate | null {
    return changetype<Total_GLOW_USDG_Pair_Aggregate | null>(
      store.get("Total_GLOW_USDG_Pair_Aggregate", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalAmountZeroOut(): BigInt {
    let value = this.get("totalAmountZeroOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountZeroOut(value: BigInt) {
    this.set("totalAmountZeroOut", Value.fromBigInt(value));
  }

  get totalAmountOneOut(): BigInt {
    let value = this.get("totalAmountOneOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountOneOut(value: BigInt) {
    this.set("totalAmountOneOut", Value.fromBigInt(value));
  }

  get totalAmountZeroIn(): BigInt {
    let value = this.get("totalAmountZeroIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountZeroIn(value: BigInt) {
    this.set("totalAmountZeroIn", Value.fromBigInt(value));
  }

  get totalAmountOneIn(): BigInt {
    let value = this.get("totalAmountOneIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountOneIn(value: BigInt) {
    this.set("totalAmountOneIn", Value.fromBigInt(value));
  }
}

export class TotalImpactPointsAggregate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TotalImpactPointsAggregate entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TotalImpactPointsAggregate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TotalImpactPointsAggregate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TotalImpactPointsAggregate | null {
    return changetype<TotalImpactPointsAggregate | null>(
      store.get_in_block("TotalImpactPointsAggregate", id),
    );
  }

  static load(id: string): TotalImpactPointsAggregate | null {
    return changetype<TotalImpactPointsAggregate | null>(
      store.get("TotalImpactPointsAggregate", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalImpactPoints(): BigInt {
    let value = this.get("totalImpactPoints");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalImpactPoints(value: BigInt) {
    this.set("totalImpactPoints", Value.fromBigInt(value));
  }

  get totalUSDC_Committed(): BigInt {
    let value = this.get("totalUSDC_Committed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUSDC_Committed(value: BigInt) {
    this.set("totalUSDC_Committed", Value.fromBigInt(value));
  }

  get totalGCC_Committed(): BigInt {
    let value = this.get("totalGCC_Committed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGCC_Committed(value: BigInt) {
    this.set("totalGCC_Committed", Value.fromBigInt(value));
  }

  get totalUSDC_Value(): BigInt {
    let value = this.get("totalUSDC_Value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUSDC_Value(value: BigInt) {
    this.set("totalUSDC_Value", Value.fromBigInt(value));
  }
}

export class RatificationVoteLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RatificationVote[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RatificationVote[]>(value);
  }
}

export class RejectionVoteLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RejectionVote[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RejectionVote[]>(value);
  }
}

export class NominationSpendLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): NominationSpend[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<NominationSpend[]>(value);
  }
}

export class GCCRetiredLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): GCCRetired[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<GCCRetired[]>(value);
  }
}

export class USDCRetiredLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): USDCRetired[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<USDCRetired[]>(value);
  }
}

export class DonationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Donation[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Donation[]>(value);
  }
}

export class EarlyLiquidityPurchaseLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): EarlyLiquidityPurchase[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<EarlyLiquidityPurchase[]>(value);
  }
}

export class ActivityLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Activity[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Activity[]>(value);
  }
}
