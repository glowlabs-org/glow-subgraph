// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AmountDonatedToBucket extends ethereum.Event {
  get params(): AmountDonatedToBucket__Params {
    return new AmountDonatedToBucket__Params(this);
  }
}

export class AmountDonatedToBucket__Params {
  _event: AmountDonatedToBucket;

  constructor(event: AmountDonatedToBucket) {
    this._event = event;
  }

  get bucketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalAmountDonated(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BucketSubmissionEvent extends ethereum.Event {
  get params(): BucketSubmissionEvent__Params {
    return new BucketSubmissionEvent__Params(this);
  }
}

export class BucketSubmissionEvent__Params {
  _event: BucketSubmissionEvent;

  constructor(event: BucketSubmissionEvent) {
    this._event = event;
  }

  get bucketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get gca(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get slashNonce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalNewGCC(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalGlwRewardsWeight(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalGRCRewardsWeight(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get root(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }

  get extraData(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }
}

export class CompensationPlanSubmitted extends ethereum.Event {
  get params(): CompensationPlanSubmitted__Params {
    return new CompensationPlanSubmitted__Params(this);
  }
}

export class CompensationPlanSubmitted__Params {
  _event: CompensationPlanSubmitted;

  constructor(event: CompensationPlanSubmitted) {
    this._event = event;
  }

  get agent(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get plan(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class GCAPayoutClaimed extends ethereum.Event {
  get params(): GCAPayoutClaimed__Params {
    return new GCAPayoutClaimed__Params(this);
  }
}

export class GCAPayoutClaimed__Params {
  _event: GCAPayoutClaimed;

  constructor(event: GCAPayoutClaimed) {
    this._event = event;
  }

  get agent(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalSlashableBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GCAsSlashed extends ethereum.Event {
  get params(): GCAsSlashed__Params {
    return new GCAsSlashed__Params(this);
  }
}

export class GCAsSlashed__Params {
  _event: GCAsSlashed;

  constructor(event: GCAsSlashed) {
    this._event = event;
  }

  get slashedGcas(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class NewGCAsAppointed extends ethereum.Event {
  get params(): NewGCAsAppointed__Params {
    return new NewGCAsAppointed__Params(this);
  }
}

export class NewGCAsAppointed__Params {
  _event: NewGCAsAppointed;

  constructor(event: NewGCAsAppointed) {
    this._event = event;
  }

  get newGcas(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class ProposalHashPushed extends ethereum.Event {
  get params(): ProposalHashPushed__Params {
    return new ProposalHashPushed__Params(this);
  }
}

export class ProposalHashPushed__Params {
  _event: ProposalHashPushed;

  constructor(event: ProposalHashPushed) {
    this._event = event;
  }

  get proposalHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ProposalHashUpdate extends ethereum.Event {
  get params(): ProposalHashUpdate__Params {
    return new ProposalHashUpdate__Params(this);
  }
}

export class ProposalHashUpdate__Params {
  _event: ProposalHashUpdate;

  constructor(event: ProposalHashUpdate) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class RequirementsHashUpdated extends ethereum.Event {
  get params(): RequirementsHashUpdated__Params {
    return new RequirementsHashUpdated__Params(this);
  }
}

export class RequirementsHashUpdated__Params {
  _event: RequirementsHashUpdated;

  constructor(event: RequirementsHashUpdated) {
    this._event = event;
  }

  get requirementsHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class MinerPoolAndGCA__bucketResultBucketStruct extends ethereum.Tuple {
  get originalNonce(): BigInt {
    return this[0].toBigInt();
  }

  get lastUpdatedNonce(): BigInt {
    return this[1].toBigInt();
  }

  get finalizationTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get reports(): Array<MinerPoolAndGCA__bucketResultBucketReportsStruct> {
    return this[3].toTupleArray<MinerPoolAndGCA__bucketResultBucketReportsStruct>();
  }
}

export class MinerPoolAndGCA__bucketResultBucketReportsStruct extends ethereum.Tuple {
  get totalNewGCC(): BigInt {
    return this[0].toBigInt();
  }

  get totalGLWRewardsWeight(): BigInt {
    return this[1].toBigInt();
  }

  get totalGRCRewardsWeight(): BigInt {
    return this[2].toBigInt();
  }

  get merkleRoot(): Bytes {
    return this[3].toBytes();
  }

  get proposingAgent(): Address {
    return this[4].toAddress();
  }
}

export class MinerPoolAndGCA__bucketGlobalStateResultValue0Struct extends ethereum.Tuple {
  get totalNewGCC(): BigInt {
    return this[0].toBigInt();
  }

  get totalGLWRewardsWeight(): BigInt {
    return this[1].toBigInt();
  }

  get totalGRCRewardsWeight(): BigInt {
    return this[2].toBigInt();
  }
}

export class MinerPoolAndGCA__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class MinerPoolAndGCA__gcaPayoutDataResultValue0Struct extends ethereum.Tuple {
  get lastClaimedTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get maxClaimTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get totalSlashableBalance(): BigInt {
    return this[2].toBigInt();
  }
}

export class MinerPoolAndGCA__getBucketTrackerResultValue0Struct extends ethereum.Tuple {
  get lastUpdatedBucket(): BigInt {
    return this[0].toBigInt();
  }

  get maxBucketId(): BigInt {
    return this[1].toBigInt();
  }

  get firstAddedBucketId(): BigInt {
    return this[2].toBigInt();
  }
}

export class MinerPoolAndGCA__getPayoutDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getWithdrawableAmount(): BigInt {
    return this.value0;
  }

  getSlashableAmount(): BigInt {
    return this.value1;
  }

  getAmountAlreadyWithdrawn(): BigInt {
    return this.value2;
  }
}

export class MinerPoolAndGCA__rewardResultValue0Struct extends ethereum.Tuple {
  get inheritedFromLastWeek(): boolean {
    return this[0].toBoolean();
  }

  get amountInBucket(): BigInt {
    return this[1].toBigInt();
  }

  get amountToDeduct(): BigInt {
    return this[2].toBigInt();
  }
}

export class MinerPoolAndGCA extends ethereum.SmartContract {
  static bind(address: Address): MinerPoolAndGCA {
    return new MinerPoolAndGCA("MinerPoolAndGCA", address);
  }

  CLAIM_PAYOUT_RELAY_PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "CLAIM_PAYOUT_RELAY_PERMIT_TYPEHASH",
      "CLAIM_PAYOUT_RELAY_PERMIT_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_CLAIM_PAYOUT_RELAY_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CLAIM_PAYOUT_RELAY_PERMIT_TYPEHASH",
      "CLAIM_PAYOUT_RELAY_PERMIT_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  GCC(): Address {
    let result = super.call("GCC", "GCC():(address)", []);

    return result[0].toAddress();
  }

  try_GCC(): ethereum.CallResult<Address> {
    let result = super.tryCall("GCC", "GCC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GENESIS_TIMESTAMP(): BigInt {
    let result = super.call(
      "GENESIS_TIMESTAMP",
      "GENESIS_TIMESTAMP():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_GENESIS_TIMESTAMP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "GENESIS_TIMESTAMP",
      "GENESIS_TIMESTAMP():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GLOW_REWARDS_PER_BUCKET(): BigInt {
    let result = super.call(
      "GLOW_REWARDS_PER_BUCKET",
      "GLOW_REWARDS_PER_BUCKET():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_GLOW_REWARDS_PER_BUCKET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "GLOW_REWARDS_PER_BUCKET",
      "GLOW_REWARDS_PER_BUCKET():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GLOW_TOKEN(): Address {
    let result = super.call("GLOW_TOKEN", "GLOW_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_GLOW_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("GLOW_TOKEN", "GLOW_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GOVERNANCE(): Address {
    let result = super.call("GOVERNANCE", "GOVERNANCE():(address)", []);

    return result[0].toAddress();
  }

  try_GOVERNANCE(): ethereum.CallResult<Address> {
    let result = super.tryCall("GOVERNANCE", "GOVERNANCE():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  HOLDING_CONTRACT(): Address {
    let result = super.call(
      "HOLDING_CONTRACT",
      "HOLDING_CONTRACT():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_HOLDING_CONTRACT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "HOLDING_CONTRACT",
      "HOLDING_CONTRACT():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  OFFSET_LEFT(): BigInt {
    let result = super.call("OFFSET_LEFT", "OFFSET_LEFT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_OFFSET_LEFT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("OFFSET_LEFT", "OFFSET_LEFT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OFFSET_RIGHT(): BigInt {
    let result = super.call("OFFSET_RIGHT", "OFFSET_RIGHT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_OFFSET_RIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("OFFSET_RIGHT", "OFFSET_RIGHT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REWARDS_PER_SECOND_FOR_ALL(): BigInt {
    let result = super.call(
      "REWARDS_PER_SECOND_FOR_ALL",
      "REWARDS_PER_SECOND_FOR_ALL():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_REWARDS_PER_SECOND_FOR_ALL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REWARDS_PER_SECOND_FOR_ALL",
      "REWARDS_PER_SECOND_FOR_ALL():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SHARES_REQUIRED_PER_COMP_PLAN(): BigInt {
    let result = super.call(
      "SHARES_REQUIRED_PER_COMP_PLAN",
      "SHARES_REQUIRED_PER_COMP_PLAN():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_SHARES_REQUIRED_PER_COMP_PLAN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SHARES_REQUIRED_PER_COMP_PLAN",
      "SHARES_REQUIRED_PER_COMP_PLAN():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_VESTING_PERIODS(): BigInt {
    let result = super.call(
      "TOTAL_VESTING_PERIODS",
      "TOTAL_VESTING_PERIODS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_TOTAL_VESTING_PERIODS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOTAL_VESTING_PERIODS",
      "TOTAL_VESTING_PERIODS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  USDC(): Address {
    let result = super.call("USDC", "USDC():(address)", []);

    return result[0].toAddress();
  }

  try_USDC(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC", "USDC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allGcas(): Array<Address> {
    let result = super.call("allGcas", "allGcas():(address[])", []);

    return result[0].toAddressArray();
  }

  try_allGcas(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("allGcas", "allGcas():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  amountWithdrawnAtPaymentNonce(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "amountWithdrawnAtPaymentNonce",
      "amountWithdrawnAtPaymentNonce(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_amountWithdrawnAtPaymentNonce(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountWithdrawnAtPaymentNonce",
      "amountWithdrawnAtPaymentNonce(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bucket(bucketId: BigInt): MinerPoolAndGCA__bucketResultBucketStruct {
    let result = super.call(
      "bucket",
      "bucket(uint256):((uint64,uint64,uint128,(uint128,uint64,uint64,bytes32,address)[]))",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );

    return changetype<MinerPoolAndGCA__bucketResultBucketStruct>(
      result[0].toTuple(),
    );
  }

  try_bucket(
    bucketId: BigInt,
  ): ethereum.CallResult<MinerPoolAndGCA__bucketResultBucketStruct> {
    let result = super.tryCall(
      "bucket",
      "bucket(uint256):((uint64,uint64,uint128,(uint128,uint64,uint64,bytes32,address)[]))",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MinerPoolAndGCA__bucketResultBucketStruct>(value[0].toTuple()),
    );
  }

  bucketClaimBitmap(bucketId: BigInt, user: Address): BigInt {
    let result = super.call(
      "bucketClaimBitmap",
      "bucketClaimBitmap(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(bucketId),
        ethereum.Value.fromAddress(user),
      ],
    );

    return result[0].toBigInt();
  }

  try_bucketClaimBitmap(
    bucketId: BigInt,
    user: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bucketClaimBitmap",
      "bucketClaimBitmap(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(bucketId),
        ethereum.Value.fromAddress(user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bucketDelayDuration(): BigInt {
    let result = super.call(
      "bucketDelayDuration",
      "bucketDelayDuration():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_bucketDelayDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bucketDelayDuration",
      "bucketDelayDuration():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bucketEndSubmissionTimestampNotReinstated(bucketId: BigInt): BigInt {
    let result = super.call(
      "bucketEndSubmissionTimestampNotReinstated",
      "bucketEndSubmissionTimestampNotReinstated(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );

    return result[0].toBigInt();
  }

  try_bucketEndSubmissionTimestampNotReinstated(
    bucketId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bucketEndSubmissionTimestampNotReinstated",
      "bucketEndSubmissionTimestampNotReinstated(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bucketFinalizationTimestampNotReinstated(bucketId: BigInt): BigInt {
    let result = super.call(
      "bucketFinalizationTimestampNotReinstated",
      "bucketFinalizationTimestampNotReinstated(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );

    return result[0].toBigInt();
  }

  try_bucketFinalizationTimestampNotReinstated(
    bucketId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bucketFinalizationTimestampNotReinstated",
      "bucketFinalizationTimestampNotReinstated(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bucketGlobalState(
    bucketId: BigInt,
  ): MinerPoolAndGCA__bucketGlobalStateResultValue0Struct {
    let result = super.call(
      "bucketGlobalState",
      "bucketGlobalState(uint256):((uint128,uint64,uint64))",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );

    return changetype<MinerPoolAndGCA__bucketGlobalStateResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_bucketGlobalState(
    bucketId: BigInt,
  ): ethereum.CallResult<MinerPoolAndGCA__bucketGlobalStateResultValue0Struct> {
    let result = super.tryCall(
      "bucketGlobalState",
      "bucketGlobalState(uint256):((uint128,uint64,uint64))",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MinerPoolAndGCA__bucketGlobalStateResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  bucketStartSubmissionTimestampNotReinstated(bucketId: BigInt): BigInt {
    let result = super.call(
      "bucketStartSubmissionTimestampNotReinstated",
      "bucketStartSubmissionTimestampNotReinstated(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );

    return result[0].toBigInt();
  }

  try_bucketStartSubmissionTimestampNotReinstated(
    bucketId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bucketStartSubmissionTimestampNotReinstated",
      "bucketStartSubmissionTimestampNotReinstated(uint256):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createClaimRewardFromBucketDigest(
    bucketId: BigInt,
    glwWeight: BigInt,
    usdcWeight: BigInt,
    index: BigInt,
    claimFromInflation: boolean,
  ): Bytes {
    let result = super.call(
      "createClaimRewardFromBucketDigest",
      "createClaimRewardFromBucketDigest(uint256,uint256,uint256,uint256,bool):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(bucketId),
        ethereum.Value.fromUnsignedBigInt(glwWeight),
        ethereum.Value.fromUnsignedBigInt(usdcWeight),
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromBoolean(claimFromInflation),
      ],
    );

    return result[0].toBytes();
  }

  try_createClaimRewardFromBucketDigest(
    bucketId: BigInt,
    glwWeight: BigInt,
    usdcWeight: BigInt,
    index: BigInt,
    claimFromInflation: boolean,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createClaimRewardFromBucketDigest",
      "createClaimRewardFromBucketDigest(uint256,uint256,uint256,uint256,bool):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(bucketId),
        ethereum.Value.fromUnsignedBigInt(glwWeight),
        ethereum.Value.fromUnsignedBigInt(usdcWeight),
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromBoolean(claimFromInflation),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  createRelayDigest(
    relayer: Address,
    paymentNonce: BigInt,
    relayNonce: BigInt,
  ): Bytes {
    let result = super.call(
      "createRelayDigest",
      "createRelayDigest(address,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(relayer),
        ethereum.Value.fromUnsignedBigInt(paymentNonce),
        ethereum.Value.fromUnsignedBigInt(relayNonce),
      ],
    );

    return result[0].toBytes();
  }

  try_createRelayDigest(
    relayer: Address,
    paymentNonce: BigInt,
    relayNonce: BigInt,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createRelayDigest",
      "createRelayDigest(address,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(relayer),
        ethereum.Value.fromUnsignedBigInt(paymentNonce),
        ethereum.Value.fromUnsignedBigInt(relayNonce),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  currentBucket(): BigInt {
    let result = super.call("currentBucket", "currentBucket():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentBucket(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentBucket",
      "currentBucket():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earlyLiquidity(): Address {
    let result = super.call("earlyLiquidity", "earlyLiquidity():(address)", []);

    return result[0].toAddress();
  }

  try_earlyLiquidity(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "earlyLiquidity",
      "earlyLiquidity():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  eip712Domain(): MinerPoolAndGCA__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new MinerPoolAndGCA__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<MinerPoolAndGCA__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MinerPoolAndGCA__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  gcaAgents(param0: BigInt): Address {
    let result = super.call("gcaAgents", "gcaAgents(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_gcaAgents(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("gcaAgents", "gcaAgents(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gcaPayoutData(
    gca: Address,
  ): MinerPoolAndGCA__gcaPayoutDataResultValue0Struct {
    let result = super.call(
      "gcaPayoutData",
      "gcaPayoutData(address):((uint64,uint64,uint128))",
      [ethereum.Value.fromAddress(gca)],
    );

    return changetype<MinerPoolAndGCA__gcaPayoutDataResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_gcaPayoutData(
    gca: Address,
  ): ethereum.CallResult<MinerPoolAndGCA__gcaPayoutDataResultValue0Struct> {
    let result = super.tryCall(
      "gcaPayoutData",
      "gcaPayoutData(address):((uint64,uint64,uint128))",
      [ethereum.Value.fromAddress(gca)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MinerPoolAndGCA__gcaPayoutDataResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getBucketTracker(): MinerPoolAndGCA__getBucketTrackerResultValue0Struct {
    let result = super.call(
      "getBucketTracker",
      "getBucketTracker():((uint48,uint48,uint48))",
      [],
    );

    return changetype<MinerPoolAndGCA__getBucketTrackerResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getBucketTracker(): ethereum.CallResult<MinerPoolAndGCA__getBucketTrackerResultValue0Struct> {
    let result = super.tryCall(
      "getBucketTracker",
      "getBucketTracker():((uint48,uint48,uint48))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MinerPoolAndGCA__getBucketTrackerResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getPayoutData(
    user: Address,
    paymentNonce: BigInt,
    activeGCAsAtPaymentNonce: Array<Address>,
    userIndex: BigInt,
  ): MinerPoolAndGCA__getPayoutDataResult {
    let result = super.call(
      "getPayoutData",
      "getPayoutData(address,uint256,address[],uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(paymentNonce),
        ethereum.Value.fromAddressArray(activeGCAsAtPaymentNonce),
        ethereum.Value.fromUnsignedBigInt(userIndex),
      ],
    );

    return new MinerPoolAndGCA__getPayoutDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_getPayoutData(
    user: Address,
    paymentNonce: BigInt,
    activeGCAsAtPaymentNonce: Array<Address>,
    userIndex: BigInt,
  ): ethereum.CallResult<MinerPoolAndGCA__getPayoutDataResult> {
    let result = super.tryCall(
      "getPayoutData",
      "getPayoutData(address,uint256,address[],uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(paymentNonce),
        ethereum.Value.fromAddressArray(activeGCAsAtPaymentNonce),
        ethereum.Value.fromUnsignedBigInt(userIndex),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MinerPoolAndGCA__getPayoutDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  getProposalHashes(start: BigInt, end: BigInt): Array<Bytes> {
    let result = super.call(
      "getProposalHashes",
      "getProposalHashes(uint256,uint256):(bytes32[])",
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end),
      ],
    );

    return result[0].toBytesArray();
  }

  try_getProposalHashes(
    start: BigInt,
    end: BigInt,
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getProposalHashes",
      "getProposalHashes(uint256,uint256):(bytes32[])",
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getProposalHashes1(): Array<Bytes> {
    let result = super.call(
      "getProposalHashes",
      "getProposalHashes():(bytes32[])",
      [],
    );

    return result[0].toBytesArray();
  }

  try_getProposalHashes1(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getProposalHashes",
      "getProposalHashes():(bytes32[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  hasBucketBeenDelayed(bucketId: BigInt): boolean {
    let result = super.call(
      "hasBucketBeenDelayed",
      "hasBucketBeenDelayed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );

    return result[0].toBoolean();
  }

  try_hasBucketBeenDelayed(bucketId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasBucketBeenDelayed",
      "hasBucketBeenDelayed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBucketFinalized(bucketId: BigInt): boolean {
    let result = super.call(
      "isBucketFinalized",
      "isBucketFinalized(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );

    return result[0].toBoolean();
  }

  try_isBucketFinalized(bucketId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBucketFinalized",
      "isBucketFinalized(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(bucketId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGCA(account: Address): boolean {
    let result = super.call("isGCA", "isGCA(address):(bool)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_isGCA(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isGCA", "isGCA(address):(bool)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGCA1(account: Address, index: BigInt): boolean {
    let result = super.call("isGCA", "isGCA(address,uint256):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(index),
    ]);

    return result[0].toBoolean();
  }

  try_isGCA1(account: Address, index: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isGCA", "isGCA(address,uint256):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(index),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSlashed(param0: Address): boolean {
    let result = super.call("isSlashed", "isSlashed(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isSlashed(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSlashed", "isSlashed(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nextProposalIndexToUpdate(): BigInt {
    let result = super.call(
      "nextProposalIndexToUpdate",
      "nextProposalIndexToUpdate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_nextProposalIndexToUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextProposalIndexToUpdate",
      "nextProposalIndexToUpdate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextRelayNonce(param0: Address): BigInt {
    let result = super.call(
      "nextRelayNonce",
      "nextRelayNonce(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_nextRelayNonce(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextRelayNonce",
      "nextRelayNonce(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paymentNonce(): BigInt {
    let result = super.call("paymentNonce", "paymentNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_paymentNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("paymentNonce", "paymentNonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paymentNonceToCompensationPlan(nonce: BigInt, index: BigInt): Array<BigInt> {
    let result = super.call(
      "paymentNonceToCompensationPlan",
      "paymentNonceToCompensationPlan(uint256,uint256):(uint32[5])",
      [
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_paymentNonceToCompensationPlan(
    nonce: BigInt,
    index: BigInt,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "paymentNonceToCompensationPlan",
      "paymentNonceToCompensationPlan(uint256,uint256):(uint32[5])",
      [
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  paymentNonceToShiftStartTimestamp(nonce: BigInt): BigInt {
    let result = super.call(
      "paymentNonceToShiftStartTimestamp",
      "paymentNonceToShiftStartTimestamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(nonce)],
    );

    return result[0].toBigInt();
  }

  try_paymentNonceToShiftStartTimestamp(
    nonce: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentNonceToShiftStartTimestamp",
      "paymentNonceToShiftStartTimestamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(nonce)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payoutNonceToGCAHash(nonce: BigInt): Bytes {
    let result = super.call(
      "payoutNonceToGCAHash",
      "payoutNonceToGCAHash(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(nonce)],
    );

    return result[0].toBytes();
  }

  try_payoutNonceToGCAHash(nonce: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "payoutNonceToGCAHash",
      "payoutNonceToGCAHash(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(nonce)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  proposalHashes(param0: BigInt): Bytes {
    let result = super.call(
      "proposalHashes",
      "proposalHashes(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBytes();
  }

  try_proposalHashes(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proposalHashes",
      "proposalHashes(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  requirementsHash(): Bytes {
    let result = super.call(
      "requirementsHash",
      "requirementsHash():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_requirementsHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "requirementsHash",
      "requirementsHash():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  reward(id: BigInt): MinerPoolAndGCA__rewardResultValue0Struct {
    let result = super.call(
      "reward",
      "reward(uint256):((bool,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return changetype<MinerPoolAndGCA__rewardResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_reward(
    id: BigInt,
  ): ethereum.CallResult<MinerPoolAndGCA__rewardResultValue0Struct> {
    let result = super.tryCall(
      "reward",
      "reward(uint256):((bool,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MinerPoolAndGCA__rewardResultValue0Struct>(value[0].toTuple()),
    );
  }

  slashNonce(): BigInt {
    let result = super.call("slashNonce", "slashNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_slashNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slashNonce", "slashNonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slashNonceToSlashTimestamp(param0: BigInt): BigInt {
    let result = super.call(
      "slashNonceToSlashTimestamp",
      "slashNonceToSlashTimestamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_slashNonceToSlashTimestamp(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slashNonceToSlashTimestamp",
      "slashNonceToSlashTimestamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _gcaAgents(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _glowToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _governance(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _requirementsHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _earlyLiquidity(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _usdcToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _vetoCouncil(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _holdingContract(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _gcc(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimGlowFromInflationCall extends ethereum.Call {
  get inputs(): ClaimGlowFromInflationCall__Inputs {
    return new ClaimGlowFromInflationCall__Inputs(this);
  }

  get outputs(): ClaimGlowFromInflationCall__Outputs {
    return new ClaimGlowFromInflationCall__Outputs(this);
  }
}

export class ClaimGlowFromInflationCall__Inputs {
  _call: ClaimGlowFromInflationCall;

  constructor(call: ClaimGlowFromInflationCall) {
    this._call = call;
  }
}

export class ClaimGlowFromInflationCall__Outputs {
  _call: ClaimGlowFromInflationCall;

  constructor(call: ClaimGlowFromInflationCall) {
    this._call = call;
  }
}

export class ClaimPayoutCall extends ethereum.Call {
  get inputs(): ClaimPayoutCall__Inputs {
    return new ClaimPayoutCall__Inputs(this);
  }

  get outputs(): ClaimPayoutCall__Outputs {
    return new ClaimPayoutCall__Outputs(this);
  }
}

export class ClaimPayoutCall__Inputs {
  _call: ClaimPayoutCall;

  constructor(call: ClaimPayoutCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get paymentNonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get activeGCAsAtPaymentNonce(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get userIndex(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get claimFromInflation(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get sig(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class ClaimPayoutCall__Outputs {
  _call: ClaimPayoutCall;

  constructor(call: ClaimPayoutCall) {
    this._call = call;
  }
}

export class ClaimRewardFromBucketCall extends ethereum.Call {
  get inputs(): ClaimRewardFromBucketCall__Inputs {
    return new ClaimRewardFromBucketCall__Inputs(this);
  }

  get outputs(): ClaimRewardFromBucketCall__Outputs {
    return new ClaimRewardFromBucketCall__Outputs(this);
  }
}

export class ClaimRewardFromBucketCall__Inputs {
  _call: ClaimRewardFromBucketCall;

  constructor(call: ClaimRewardFromBucketCall) {
    this._call = call;
  }

  get bucketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get glwWeight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get usdcWeight(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get index(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get claimFromInflation(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get signature(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class ClaimRewardFromBucketCall__Outputs {
  _call: ClaimRewardFromBucketCall;

  constructor(call: ClaimRewardFromBucketCall) {
    this._call = call;
  }
}

export class DelayBucketFinalizationCall extends ethereum.Call {
  get inputs(): DelayBucketFinalizationCall__Inputs {
    return new DelayBucketFinalizationCall__Inputs(this);
  }

  get outputs(): DelayBucketFinalizationCall__Outputs {
    return new DelayBucketFinalizationCall__Outputs(this);
  }
}

export class DelayBucketFinalizationCall__Inputs {
  _call: DelayBucketFinalizationCall;

  constructor(call: DelayBucketFinalizationCall) {
    this._call = call;
  }

  get bucketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DelayBucketFinalizationCall__Outputs {
  _call: DelayBucketFinalizationCall;

  constructor(call: DelayBucketFinalizationCall) {
    this._call = call;
  }
}

export class DonateToUSDCMinerRewardsPoolCall extends ethereum.Call {
  get inputs(): DonateToUSDCMinerRewardsPoolCall__Inputs {
    return new DonateToUSDCMinerRewardsPoolCall__Inputs(this);
  }

  get outputs(): DonateToUSDCMinerRewardsPoolCall__Outputs {
    return new DonateToUSDCMinerRewardsPoolCall__Outputs(this);
  }
}

export class DonateToUSDCMinerRewardsPoolCall__Inputs {
  _call: DonateToUSDCMinerRewardsPoolCall;

  constructor(call: DonateToUSDCMinerRewardsPoolCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DonateToUSDCMinerRewardsPoolCall__Outputs {
  _call: DonateToUSDCMinerRewardsPoolCall;

  constructor(call: DonateToUSDCMinerRewardsPoolCall) {
    this._call = call;
  }
}

export class DonateToUSDCMinerRewardsPoolEarlyLiquidityCall extends ethereum.Call {
  get inputs(): DonateToUSDCMinerRewardsPoolEarlyLiquidityCall__Inputs {
    return new DonateToUSDCMinerRewardsPoolEarlyLiquidityCall__Inputs(this);
  }

  get outputs(): DonateToUSDCMinerRewardsPoolEarlyLiquidityCall__Outputs {
    return new DonateToUSDCMinerRewardsPoolEarlyLiquidityCall__Outputs(this);
  }
}

export class DonateToUSDCMinerRewardsPoolEarlyLiquidityCall__Inputs {
  _call: DonateToUSDCMinerRewardsPoolEarlyLiquidityCall;

  constructor(call: DonateToUSDCMinerRewardsPoolEarlyLiquidityCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DonateToUSDCMinerRewardsPoolEarlyLiquidityCall__Outputs {
  _call: DonateToUSDCMinerRewardsPoolEarlyLiquidityCall;

  constructor(call: DonateToUSDCMinerRewardsPoolEarlyLiquidityCall) {
    this._call = call;
  }
}

export class ExecuteAgainstHashCall extends ethereum.Call {
  get inputs(): ExecuteAgainstHashCall__Inputs {
    return new ExecuteAgainstHashCall__Inputs(this);
  }

  get outputs(): ExecuteAgainstHashCall__Outputs {
    return new ExecuteAgainstHashCall__Outputs(this);
  }
}

export class ExecuteAgainstHashCall__Inputs {
  _call: ExecuteAgainstHashCall;

  constructor(call: ExecuteAgainstHashCall) {
    this._call = call;
  }

  get gcasToSlash(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get newGCAs(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get proposalCreationTimestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExecuteAgainstHashCall__Outputs {
  _call: ExecuteAgainstHashCall;

  constructor(call: ExecuteAgainstHashCall) {
    this._call = call;
  }
}

export class HandleMintToCarbonCreditAuctionCall extends ethereum.Call {
  get inputs(): HandleMintToCarbonCreditAuctionCall__Inputs {
    return new HandleMintToCarbonCreditAuctionCall__Inputs(this);
  }

  get outputs(): HandleMintToCarbonCreditAuctionCall__Outputs {
    return new HandleMintToCarbonCreditAuctionCall__Outputs(this);
  }
}

export class HandleMintToCarbonCreditAuctionCall__Inputs {
  _call: HandleMintToCarbonCreditAuctionCall;

  constructor(call: HandleMintToCarbonCreditAuctionCall) {
    this._call = call;
  }

  get bucketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class HandleMintToCarbonCreditAuctionCall__Outputs {
  _call: HandleMintToCarbonCreditAuctionCall;

  constructor(call: HandleMintToCarbonCreditAuctionCall) {
    this._call = call;
  }
}

export class PushHashCall extends ethereum.Call {
  get inputs(): PushHashCall__Inputs {
    return new PushHashCall__Inputs(this);
  }

  get outputs(): PushHashCall__Outputs {
    return new PushHashCall__Outputs(this);
  }
}

export class PushHashCall__Inputs {
  _call: PushHashCall;

  constructor(call: PushHashCall) {
    this._call = call;
  }

  get hash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get incrementSlashNonce(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class PushHashCall__Outputs {
  _call: PushHashCall;

  constructor(call: PushHashCall) {
    this._call = call;
  }
}

export class SetRequirementsHashCall extends ethereum.Call {
  get inputs(): SetRequirementsHashCall__Inputs {
    return new SetRequirementsHashCall__Inputs(this);
  }

  get outputs(): SetRequirementsHashCall__Outputs {
    return new SetRequirementsHashCall__Outputs(this);
  }
}

export class SetRequirementsHashCall__Inputs {
  _call: SetRequirementsHashCall;

  constructor(call: SetRequirementsHashCall) {
    this._call = call;
  }

  get _requirementsHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetRequirementsHashCall__Outputs {
  _call: SetRequirementsHashCall;

  constructor(call: SetRequirementsHashCall) {
    this._call = call;
  }
}

export class SubmitCompensationPlanCall extends ethereum.Call {
  get inputs(): SubmitCompensationPlanCall__Inputs {
    return new SubmitCompensationPlanCall__Inputs(this);
  }

  get outputs(): SubmitCompensationPlanCall__Outputs {
    return new SubmitCompensationPlanCall__Outputs(this);
  }
}

export class SubmitCompensationPlanCall__Inputs {
  _call: SubmitCompensationPlanCall;

  constructor(call: SubmitCompensationPlanCall) {
    this._call = call;
  }

  get plan(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get indexOfGCA(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubmitCompensationPlanCall__Outputs {
  _call: SubmitCompensationPlanCall;

  constructor(call: SubmitCompensationPlanCall) {
    this._call = call;
  }
}

export class SubmitWeeklyReportCall extends ethereum.Call {
  get inputs(): SubmitWeeklyReportCall__Inputs {
    return new SubmitWeeklyReportCall__Inputs(this);
  }

  get outputs(): SubmitWeeklyReportCall__Outputs {
    return new SubmitWeeklyReportCall__Outputs(this);
  }
}

export class SubmitWeeklyReportCall__Inputs {
  _call: SubmitWeeklyReportCall;

  constructor(call: SubmitWeeklyReportCall) {
    this._call = call;
  }

  get bucketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get totalNewGCC(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get totalGlwRewardsWeight(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalGRCRewardsWeight(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get root(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SubmitWeeklyReportCall__Outputs {
  _call: SubmitWeeklyReportCall;

  constructor(call: SubmitWeeklyReportCall) {
    this._call = call;
  }
}

export class SubmitWeeklyReportWithBytesCall extends ethereum.Call {
  get inputs(): SubmitWeeklyReportWithBytesCall__Inputs {
    return new SubmitWeeklyReportWithBytesCall__Inputs(this);
  }

  get outputs(): SubmitWeeklyReportWithBytesCall__Outputs {
    return new SubmitWeeklyReportWithBytesCall__Outputs(this);
  }
}

export class SubmitWeeklyReportWithBytesCall__Inputs {
  _call: SubmitWeeklyReportWithBytesCall;

  constructor(call: SubmitWeeklyReportWithBytesCall) {
    this._call = call;
  }

  get bucketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get totalNewGCC(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get totalGlwRewardsWeight(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalGRCRewardsWeight(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get root(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SubmitWeeklyReportWithBytesCall__Outputs {
  _call: SubmitWeeklyReportWithBytesCall;

  constructor(call: SubmitWeeklyReportWithBytesCall) {
    this._call = call;
  }
}
